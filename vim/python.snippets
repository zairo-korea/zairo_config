snippet pwn
from pwn import *
import sys

def re(nc):
    host, port = nc.strip().split()
    return remote(host, int(port))

LOCAL = ${4:True}
DEBUG = ${5:True}

binary = '${3:`vim_snippets#Filename('$1.py', 'foo.py')`}'
e = ELF(binary)
#libc = ELF('./libc.so.6', checksec=False)

if DEBUG:
    context.log_level = "debug"

if len(sys.argv) > 1:
    LOCAL = True

if LOCAL:
    p = process(binary)
else:
    p = re('${1:127.0.0.1 1234}')

#gdb.attach(p, 'br *main+91')

stop = lambda : pause()
sl = lambda x: p.sendline(x)
sla = lambda x,y: p.sendlineafter(x,y)
ru = lambda x: p.recvuntil(x)
rl = lambda x: p.recvline(x)
io = lambda : p.interactive()
sa = lambda x,y: p.sendafter(x,y)
cl = lambda : p.close()
l = lambda x : log.critical(x)


${0:sla(": ", "${7:data}")}


io()
cl()
endsnippet
snippet to_str
def to_str(inp):
	if type(inp) == str:
		return inp
	else:
		return str(inp)
endsnippet
snippet menu "function with dynamic docblock" b
def ${1:menu}(${2:sel}):
	# select menu
	index = to_str(${3:index})
	sla(": ", index)
	
	# input data${0:${VISUAL}}`!p
# Currently Ultisnips does not support dynamic tabstops, so we cannot add
# tabstops to the datatype for these param tags until that feature is added.

def formatArg(argument):
	return "    {0} = to_str({0})".format(argument)
	
def formatTag(argument):
	return "    sla(\": \", {0})".format(argument)

arguments = t[2].split(',')
arguments = [argument.strip() for argument in arguments if argument]

if len(arguments):
	args = map(formatArg, arguments)
	tags = map(formatTag, arguments)
	for arg in args:
		snip += arg
	for tag in tags:
		snip += tag
	snip += ''
else:
	snip.rv = ''
`
endsnippet
